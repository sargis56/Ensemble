<div style="max-width:900px; margin-left:auto; margin-right:auto; padding:10px;" >
    <div style="display:inline-block; ">
        <image src="/no-art.jpg" style="width:100px; height:100px"/>
    </div>
    <div  style="display:inline-block;" >
        <h4>Title</h4>
        <h5>Artist</h5>
    </div>
    <div  style="display: inline-block; float: right; " >
        <button><i class="fas fa-step-backward"></i></button>
        <button id="btn-play" onclick="ResumePlayback();"><i class="fas fa-play"></i></button>
        <button id="btn-pause" onclick="PausePlayback();"><i class="fas fa-play"></i></button>
        <button><i class="fas fa-step-forward"></i></button>
    </div>

    <script src="https://sdk.scdn.co/spotify-player.js"></script>
</div>

<script>

    var activeSongURI = "";
    var currentState;

    window.onSpotifyWebPlaybackSDKReady = () => {
        const access_token = `{{access_token}}`; //= access_token;//'BQB5OHFRsGEiNRGkx7CasE62N8Z83l1UcOIu-m9jCjq8pXeaL32bZ5yASLaxSccDCSjcY5XodpwXWU3Y1885Y44coxnMlnxJx6cfUqZUaGKNLupLfeHcKj1gU_21zWJVS4JxWyf6oX-BuKx1C_hWMUCYSEJ0HSLSE8YrzHrmImaA';
        const player = new Spotify.Player({
            name: 'Ensemble Playback',
            getOAuthToken: cb => { cb(access_token); }
        });



        // Error handling
        player.addListener('initialization_error', ({ message }) => { console.error(message); });
        player.addListener('authentication_error', ({ message }) => { console.error(message); });
        player.addListener('account_error', ({ message }) => { console.error(message); });
        player.addListener('playback_error', ({ message }) => { console.error(message); });

        // Playback status updates
        player.addListener('player_state_changed', state => { 
            if(state.paused == false && activeSongURI == ""){
                PausePlayback();
                currentState = state;
            }
            if(currentState !== undefined){
                if(state.paused != currentState.paused){
                    if(state.paused === true){
                        $('#btn-play').show();
                        $('#btn-pause').hide();
                    }else{
                        $('#btn-pause').show();
                        $('#btn-pause').hide();
                    }

                    //playback pause state has changed. send websocket message to dummy playback views

                }

                if(state.track_window.current_track.id !=   currentState.track_window.current_track.id ){
                    var xhr2 = new XMLHttpRequest();
                    xhr2.open("GET", "https://api.spotify.com/v1/tracks/" + state.track_window.current_track.id, true);
                    xhr2.setRequestHeader('Authorization' , 'Bearer ' + `{{access_token}}`);
                    xhr2.setRequestHeader('Content-Type', 'application/json')
                    xhr2.onload = function(e){
                        if(xhr2.readyState ===4){
                            console.log(xhr2.responseText);
                            responseText.name;
                            responseText.artists[0].name;
                            
                        }else{
                            console.log(xhr2.statusText);
                        }
                    };
                    xhr2.onerror = function(e){
                        console.error(xhr2.statusText);
                            reject();
                    };
                    xhr2.send();
                }

            }else{
                //current state is not set. set it.
                currentState = state;
            }
            
            

            currentState = state;
            console.log(state); 
        });

        // Ready
        player.addListener('ready', ({ device_id }) => {
            var deviceIds = [];
            deviceIds['device_ids'] = device_id;

            //use this https://developer.spotify.com/documentation/web-api/reference/player/transfer-a-users-playback/
            //switch the device to this one.

            //pause first then transfer
            $('#btn-pause').hide();
            var xhr = new XMLHttpRequest();
            xhr.open("PUT", "https://api.spotify.com/v1/me/player/pause", true);
            xhr.setRequestHeader('Authorization' , 'Bearer ' + `{{access_token}}`);
            xhr.setRequestHeader('Content-Type', 'application/json')
            xhr.onload = function(e){
                if(xhr.readyState ===4){
                    console.log(xhr.responseText);
                    var xhr2 = new XMLHttpRequest();
                    xhr2.open("PUT", "https://api.spotify.com/v1/me/player", true);
                    xhr2.setRequestHeader('Authorization' , 'Bearer ' + `{{access_token}}`);
                    xhr2.setRequestHeader('Content-Type', 'application/json')
                    xhr2.onload = function(e){
                        if(xhr2.readyState ===4){
                            console.log(xhr2.responseText);
                            PausePlayback();
                        }else{
                            console.log(xhr2.statusText);
                        }
                    };
                    xhr2.onerror = function(e){
                        console.error(xhr2.statusText);
                            reject();
                    };
                    xhr2.send("{\"device_ids\":[\""+device_id+"\"]}");
                }else{
                    console.log(xhr.statusText);
                    
                }
            };
            xhr.onerror = function(e){
                
            };
            xhr.send(null);
            
            //TransferPlayback(device_id);
            


            //https://api.spotify.com/v1/me/player

            //playback is ready for this browser window


            console.log('Ready with Device ID', device_id);
            console.log(deviceIds);

              
            
        });

        // Not Ready
        player.addListener('not_ready', ({ device_id }) => {
            console.log('Device ID has gone offline', device_id);
        });

        // Connect to the player!
        player.connect();
    };

    function TransferPlayback(device_id){
        return new Promise((resolve, reject) => {
            var xhr2 = new XMLHttpRequest();
            xhr2.open("PUT", "https://api.spotify.com/v1/me/player", true);
            xhr2.setRequestHeader('Authorization' , 'Bearer ' + `{{access_token}}`);
            xhr2.setRequestHeader('Content-Type', 'application/json')
            xhr2.onload = function(e){
                if(xhr2.readyState ===4){
                    console.log(xhr2.responseText);
                
                }else{
                    console.log(xhr2.statusText);
                
                }
            };
            xhr2.onerror = function(e){
                console.error(xhr2.statusText);
                    reject();
            };
            xhr2.send("{\"device_ids\":[\""+device_id+"\"]}");
        });
    }

    function PausePlayback(){
        return new Promise((resolve, reject) =>{
            var xhr = new XMLHttpRequest();
            xhr.open("PUT", "https://api.spotify.com/v1/me/player/pause", true);
            xhr.setRequestHeader('Authorization' , 'Bearer ' + `{{access_token}}`);
            xhr.setRequestHeader('Content-Type', 'application/json')
            xhr.onload = function(e){
                if(xhr.readyState ===4){
                    console.log(xhr.responseText);
                    
                }else{
                    console.log(xhr.statusText);
                    
                }
            };
            xhr.onerror = function(e){
                console.error(xhr.statusText);
            
            };
            xhr.send(null);
        });
    }

    function ResumePlayback(){
        if(activeSongURI !=""){
            var xhr = new XMLHttpRequest();
            xhr.open("PUT", "https://api.spotify.com/v1/me/player/play", true);
            xhr.setRequestHeader('Authorization' , 'Bearer ' + `{{access_token}}`);
            xhr.setRequestHeader('Content-Type', 'application/json')
            xhr.onload = function(e){
                if(xhr.readyState ===4){
                    console.log(xhr.responseText);
                    
                }else{
                    console.log(xhr.statusText);
                    
                }
            };
            xhr.onerror = function(e){
                console.error(xhr.statusText);
                
            };
            xhr.send(null);
        }
    }

    function PlayPlaylistTrack(track_uri){
        var xhr = new XMLHttpRequest();
            xhr.open("PUT", "https://api.spotify.com/v1/me/player/play", true);
            xhr.setRequestHeader('Authorization' , 'Bearer ' + `{{access_token}}`);
            xhr.setRequestHeader('Content-Type', 'application/json')
            xhr.onload = function(e){
                if(xhr.readyState ===4){
                    console.log(xhr.responseText);
                    activeSongURI = track_uri;
                    
                }else{
                    console.log(xhr.statusText);
                    
                }
            };
            xhr.onerror = function(e){
                console.error(xhr.statusText);
                
            };
            xhr.send("{\"uris\": [\""+ track_uri +"\"]}");
    }
</script>